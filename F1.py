# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'untitled.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QApplication, QMenu, QAction, QSystemTrayIcon,QMessageBox
from PyQt5.QtCore import QEventLoop, QTimer
from PyQt5.QtWidgets import QApplication, QMainWindow
import base64
import os
import sys
import src_rc
import threading
import subprocess

import requests
import re
#from tkinter import *
#from tkinter import messagebox
from bs4 import BeautifulSoup
import json
from time import sleep
import danmaku2ass
info_headers = {
    'User-Agent': 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36',
    'Referer': 'https://www.bilibili.com/',
    'Host': 'www.bilibili.com',
    'Cookie':"sid=8p7wlbkl; DedeUserID=457022714; DedeUserID__ckMd5=7b6955be650f3ddc; SESSDATA=73245a84%2C1613552124%2C3ed81*81; bili_jct=dd492a72eaafe7ba42645c29a2ba2b6e; LIVE_BUVID=AUTO2815980001248799; rpdid=|(u)~kmkJl|)0J'ulm)|u)JYR; blackside_state=1; CURRENT_FNVAL=80; buvid3=7BB721A9-46EE-EB11-6D31-43F8AFF4FA7761097infoc; _uuid=55CD4D9D-7007-3375-3252-A95DBA1ABFFB81418infoc; CURRENT_QUALITY=120; bp_t_offset_457022714=482356940812554924",
}
url=""
re_all = r"([0-9]|[a-z])*"
mode ="ass+"
try:
    info_headers['Cookie'] = open('cookie','r').readline()
except Exception as e:
    print('Cookie loads error')
###由于修改了下载逻辑，所以这里要重新cd到./result
def dirchange(name):
    if not os.path.exists(name):
        os.mkdir(name)
    os.chdir(name)

currentdir=os.getcwd()
choice=''
dirooo="./result"
bin_aria2_path=r'aria2c'
order_aria2='aria2c -s18 -x10  %url%  --referer "https://www.bilibili.com" --file-allocation none'
bin_ffmpeg_path=r'ffmpeg'
order_ffmpeg='ffmpeg -i %video% -i %audio% -y -c:v copy -c:a copy %filename%'

try:
    optiondict=json.load(open("option.json","r"))
    dirooo=optiondict.get("dirooo","./result")
    bin_aria2_path=optiondict.get("bin_aria2_path",r'aria2c')
    order_aria2=optiondict.get("order_aria2",'aria2c -s18 -x10  %url%  --referer "https://www.bilibili.com" --file-allocation none')
    bin_ffmpeg_path=optiondict.get("bin_ffmpeg_path",r'ffmpeg')
    order_ffmpeg=optiondict.get("order_ffmpeg",'ffmpeg -i %video% -i %audio% -y -c:v copy -c:a copy %filename%')
    mode=optiondict.get("mode","")
except Exception as e:
    print('option loads error,using default')



def del_func(filename):
    if os.name == 'nt':
        os.system("del /Q " + filename)
    elif os.name == 'posix':
        os.system("rm -f " + filename)

def ending(status=0):
    ###结束，退出
    if status==0:
        print("-----------------------------------\nDownload Success! Over after 3 s!")
        sleep(3)
    else:
        print("-----------------------------------\nDownload Failed! Please check!")

def get_file_from_cmd(link):
    ###把路径cd到./result文件夹
    global bin_aria2_path,order_aria2
    exe_path = bin_aria2_path
    order=re.sub(r'aria2c',exe_path,order_aria2)
    order=re.sub(r'%url%',link,order)
    os.system(order)



### NEW download function
###STEP 1: api to get cid
def api_to_get_cid(id):
    api="https://api.bilibili.com/x/web-interface/view?"
    cidurl=""
    if re.search("bv" + re_all, id, re.I) :
        cidurl = api + "bvid=" + id
    elif re.search("av" + re_all, id, re.I) :
        cidurl = api + "aid=" + re.search("[^a|v][0-9]*" , id, re.I).group(0)
    else :
        print("GETCID_Exception :not a av or bv id")
        return 0
    info_header2 = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36',
        'sec-fetch-dest': 'document',
        'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9',
        'accept-encoding': 'gzip, deflate', 'accept-language': 'zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6',
        'Cookie': info_headers['Cookie']}
    r = requests.get(cidurl, headers=info_header2)
    del cidurl
    jsondocs = json.loads(r.text)  # 从page中截取出json部分
    del r
    amounts=jsondocs['data']['videos']
    dict_Ep=[{} for _ in range(amounts)]
    for p,i in enumerate(jsondocs['data']['pages']):
        dict_Ep[p]['cid']=i.get('cid',0)
        dict_Ep[p]['ep']=i.get('page',0)
    return dict_Ep

###新api下载法,获取非正常类型的bvid
def url_to_bvid(aurl):
    ra = requests.get(aurl, headers=info_headers)
    sleep(1)
    aurl = ra.url  # 为避免重定向导致的header错误，再进行一次获取
    ra = requests.get(aurl, headers=info_headers)
    soup = BeautifulSoup(ra.content.decode(), 'lxml')  # 拿汤分析html页面，使用lxml较快

    # 找出带有视频信息的json位置：位于script标签下，playinfo中
    raw = soup.find_all("script")  # 找出所有script标签
    pt1 = -1  # 记录info在第几个script标签内
    for p, i in enumerate(raw):
        if str(i).find("window.__INITIAL_STATE__") != -1:
            pt1 = p
            break

    if pt1 == -1:
        print("error: not a valid link")
        sys.exit(1)  # 报错后直接卡掉程序

    page = str(raw[pt1])  # 将element转换为str

    ###浪费效率，节省内存，从我做起！[/滑稽]
    del raw
    del pt1
    del soup
    del aurl
    del ra
    ### 截止到目前 全局变量还有 filename page

    ###开始load json
    ###截止到程序build 2021.01.28 正33后131 为该script中的json部分
    jsondocs = json.loads(page[33:-131])
    #cid = jsondocs['videoData']['cid']
    bvid = jsondocs['videoData']['bvid']
    return bvid

###新blbldl,对api下载
def blbldl(durl,filename="",cid=0):
    ###开始使用request获取html
    info_header2 = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36',
        'sec-fetch-dest': 'document',
        'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9',
        'accept-encoding': 'gzip, deflate',
        'accept-language': 'zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6',
        'Cookie': info_headers['Cookie'],
    }
    r = requests.get(durl, headers=info_header2)

    ### 截止到目前 全局变量还有 filename r###upadte in 08/10/21 :requests doesn't support 'br' zip mode.
    ###开始load json
    if re.search(r"api.bilibili.com",durl,re.I):
        jsondocs = json.loads(r.text)  # 从api的response中截取出json部分
    else:
        soup = BeautifulSoup(r.content.decode(), 'lxml')  # 拿汤分析html页面，使用lxml较快

        # 找出带有视频信息的json位置：位于script标签下，playinfo中
        raw = soup.find_all("script")  # 找出所有script标签
        pt1 = -1  # 记录info在第几个script标签内
        for p, i in enumerate(raw):
            if str(i).find("window.__playinfo__") != -1:
                pt1 = p
                break

        if pt1 == -1:
            print("error: not a valid link")
            ending(-1)  # 报错后直接卡掉程序

        page = str(raw[pt1])  # 将element转换为str
        jsondocs = json.loads(page[28:-9])  # 从page中截取出json部分
    ###浪费效率，节省内存，从我做起！[/滑稽]
    del durl
    del r
    if jsondocs['data'] == 'None':
        print("Invalid b-video link,None given from api")
        ending(-1)
    ulp = jsondocs['data']['dash']  # playinfo位于该json中/data/dash下
    infov = [{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}]  # 创建列表接受视频信息
    info_p = 0  # 位置‘指针’

    for i in ulp['video']:
        infov[info_p]['bandwidth'] = i.get('bandwidth', 0)  # 可通过带宽信息比较文件清晰度
        infov[info_p]['width'] = i.get('width', 0)
        infov[info_p]['height'] = i.get('height', 0)
        #infov[info_p]['codecid'] = i.get('codecid', 0)  # codecid 7=h264 12=h265
        infov[info_p]['base_url'] = i.get('base_url', i.get('backup_url', ''))
        info_p += 1

    infoa = [{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}]
    info_p = 0
    if ulp.get('audio', "")!= "" and ulp.get('audio', "")[0].get('bandwidth', '')!= '':
        for i in ulp['audio']:
            infoa[info_p]['bandwidth'] = i.get('bandwidth', 0)
            infoa[info_p]['id'] = i.get('id', 0)
            infoa[info_p]['base_url'] = i.get('base_url', '')
            info_p += 1
    # 下面获取最高清晰度文件信息，其实根据分析，第一个必然是最清楚的h264视频
    bestvideo_p = 0
    bestaudio_p = 0

    for i, p in enumerate(infov):
        if p:
            if infov[bestvideo_p]['bandwidth'] < p['bandwidth']:
                bestvideo_p = i
    if info_p>=1:
        for i, p in enumerate(infoa):
            if p:
                if infoa[bestaudio_p]['bandwidth'] < p['bandwidth']:
                    bestaudio_p = i

    print("Get video link:SUCCESS!")
    ###下面开始下载与整合
    videoname = re.findall(r".*?.m4s", infov[bestvideo_p]["base_url"].split("/")[7])[
        0]  # 啊这是发现b站视频链接第7个/后是视频名，正则不会提所以暂时用土方了
    audioname=""
    if info_p>=1:
        audioname = re.findall(r".*?.m4s", infoa[bestaudio_p]["base_url"].split("/")[7])[0]
    ###下载
    global mode
    if re.search("ass", mode, re.I) and cid !=0:
        vUrl = 'http://comment.bilibili.com/' + str(cid) + '.xml'
        r = requests.get(vUrl,headers=info_header2)
        DanMu=open(str(cid) + '.xml','w',encoding='utf-8')
        DanMu.write(r.content.decode('utf8'))
        DanMu.close()
        danmaku2ass.Danmaku2ASS(str(cid) + '.xml', 'Bilibili',filename+'.ass',infov[bestvideo_p].get('width',1920),infov[bestvideo_p].get('height',1080),font_size=48.0,text_opacity=0.8,duration_marquee=10.0)
        print("ass Downloaded!")
        del_func(str(cid) + '.xml')
    else:
        print("Ignored ass Download.")
    if mode != "ass":
        if filename == "":
            filename = videoname + ".mp4"
        else:
            filename = filename + ".mp4"
        get_file_from_cmd(r'"' + infov[bestvideo_p]['base_url'] + r'"')  # download video
        global bin_ffmpeg_path, order_ffmpeg
        if info_p >= 1:
            get_file_from_cmd(r'"' + infoa[bestaudio_p]['base_url'] + r'"')  # download audio

            ###整合 使用ffmpeg
            order=re.sub("ffmpeg",bin_ffmpeg_path,order_ffmpeg)
            order = re.sub(r"%video%",videoname,order)
            order = re.sub(r"%audio%",audioname,order)
            order = re.sub(r"%filename%",filename,order)
            os.system(order)  # combine video and audio
            ###删除原分段下载文件
            del_func(videoname)
            del_func(audioname)
        else:
            ###整合 使用ffmpeg
            order = re.sub("ffmpeg", bin_ffmpeg_path, order_ffmpeg)
            order = re.sub(r" -i %audio% "," ",order)
            order = re.sub(r"%video%", videoname, order)
            order = re.sub(r"%filename%", filename, order)
            os.system(order)  # combine video and audio
            ###删除原分段下载文件
            del_func(videoname)
        print("video Downloaded!")


    ###结束
    print(filename + ",Downloaded!\nThis part will end after 3s!")
    sleep(3)



###考虑到BV号视频下的分p，现用api法对bv视频获取cid实现多p下载






class EmittingStr(QtCore.QObject):
    textWritten = QtCore.pyqtSignal(str)  # 定义一个发送str的信号

    def write(self, text):
        self.textWritten.emit(str(text))


class Job(threading.Thread):

    def __init__(self, name, *args, **kwargs):
        super(Job, self).__init__(*args, **kwargs)
        self.__flag = threading.Event()  # 用于暂停线程的标识
        self.__flag.set()  # 设置为True
        self.__running = threading.Event()  # 用于停止线程的标识
        self.__running.set()  # 将running设置为True
        self.name = name

    def run(self):
        while self.__running.isSet():
            self.__flag.wait()  # 为True时立即返回, 为False时阻塞直到内部的标识位为True后返回
            exec(self.name)
            self.stop()

    def pause(self):
        self.__flag.clear()  # 设置为False, 让线程阻塞

    def resume(self):
        self.__flag.set()  # 设置为True, 让线程停止阻塞

    def stop(self):
        self.__flag.set()  # 将线程从暂停状态恢复, 如何已经暂停的话
        self.__running.clear()  # 设置为False

class Job2(threading.Thread):

    def __init__(self, target=None, arg=["",""], *args, **kwargs):
        super(Job2, self).__init__(*args, **kwargs)
        self.__flag = threading.Event()  # 用于暂停线程的标识
        self.__flag.set()  # 设置为True
        self.__running = threading.Event()  # 用于停止线程的标识
        self.__running.set()  # 将running设置为True
        self._target = target
        if kwargs is None:
            kwargs = {}
        self._args = args
        self.e=arg
        self._kwargs = kwargs

    def run(self):
        while self.__running.isSet():
            self.__flag.wait()  # 为True时立即返回, 为False时阻塞直到内部的标识位为True后返回
            try:
                if self._target:
                    self._target(self.e[0],self.e[1])
            finally:
                # Avoid a refcycle if the thread is running a function with
                # an argument that has a member that points to the thread.
                del self._target, self._args, self._kwargs
            self.stop()

    def pause(self):
        self.__flag.clear()  # 设置为False, 让线程阻塞

    def resume(self):
        self.__flag.set()  # 设置为True, 让线程停止阻塞

    def stop(self):
        self.__flag.set()  # 将线程从暂停状态恢复, 如何已经暂停的话
        self.__running.clear()  # 设置为False


class Ui_blbldl(object):
    def setupUi(self, blbldl):
        blbldl.setObjectName("blbldl")
        blbldl.resize(400, 400)
        blbldl.setMinimumSize(QtCore.QSize(400, 400))
        blbldl.setMaximumSize(QtCore.QSize(400, 400))
        _translate = QtCore.QCoreApplication.translate
        blbldl.setWindowTitle(_translate("blbldl", "blbldl--哔哩哔哩 (゜-゜)つロ 干杯~"))
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(":/q/src/电视粉.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.icon=icon
        blbldl.setWindowIcon(icon)
        blbldl.setStyleSheet("color: rgb(255, 69, 240);")
        self.centralwidget = QtWidgets.QWidget(blbldl)
        self.centralwidget.setObjectName("centralwidget")
        self.gridFrame = QtWidgets.QFrame(self.centralwidget)
        self.gridFrame.setGeometry(QtCore.QRect(0, -20, 400, 400))
        self.gridFrame.setObjectName("gridFrame")
        self.gridFrame.setStyleSheet("background-image: url(:/q/src/ui1w.png);")
        self.link = QtWidgets.QLineEdit(self.centralwidget)
        self.link.setGeometry(QtCore.QRect(50, 110, 301, 51))
        font = QtGui.QFont()
        font.setFamily("幼圆")
        font.setPointSize(11)
        self.link.setFont(font)
        self.link.setCursor(QtGui.QCursor(QtCore.Qt.IBeamCursor))
        self.link.setObjectName("link")
        self.next = QtWidgets.QPushButton(self.centralwidget)
        self.next.setGeometry(QtCore.QRect(130, 190, 131, 41))
        font = QtGui.QFont()
        font.setFamily("幼圆")
        font.setPointSize(11)
        self.next.setFont(font)
        self.next.setObjectName("next")
        self.menuBar = QtWidgets.QMenuBar(blbldl)
        self.menuBar.setGeometry(QtCore.QRect(0, 0, 725, 23))
        self.menuBar.setObjectName("menuBar")
        # self.menuBar.setStyleSheet("border-color: rgb(0,0,0);")
        self.menu = QtWidgets.QMenu(self.menuBar)
        self.menu.setObjectName("menu")
        blbldl.setMenuBar(self.menuBar)
        self.queue = QtWidgets.QAction(blbldl)
        self.queue.setObjectName("queue")
        self.about = QtWidgets.QAction(blbldl)
        self.about.setObjectName("about")
        self.exit = QtWidgets.QAction(blbldl)
        self.exit.setObjectName("exit")
        self.menu.addAction(self.queue)
        self.menu.addSeparator()
        self.menu.addAction(self.about)
        self.menu.addAction(self.exit)
        self.menuBar.addAction(self.menu.menuAction())
        self.menu.setTitle(_translate("blbldl", "选项"))
        self.queue.setText(_translate("blbldl", "等待队列"))
        self.about.setText(_translate("blbldl", "关于"))
        self.exit.setText(_translate("blbldl", "退出"))

        blbldl.setMenuBar(self.menuBar)
        blbldl.setCentralWidget(self.centralwidget)

        self.link.setPlaceholderText(_translate("blbldl", "请输入视频链接或视频号"))
        self.next.setText(_translate("blbldl", "下一步"))
        self.next.clicked.connect(lambda :Job2(self.re2()).start())
        self.link.editingFinished.connect(lambda :Job2(self.re2()).start())
        QtCore.QMetaObject.connectSlotsByName(blbldl)

    def get_link(self):
        return self.link.text()

    def re2(self):
        self.setupUi2(self)
        sys.stdout = EmittingStr(textWritten=self.outputWritten)
        self.eplist=self.main(self.link.text())
        if not self.eplist == []:
            for i in range(1, len(self.eplist) + 1):
                self.comboBox.addItem(str(i), i)
        self.jsdump()

    def setupUi2(self, blbldl):
        _translate = QtCore.QCoreApplication.translate
        blbldl.setWindowTitle(_translate("blbldl", "blbldl->哔哩哔哩 (゜-゜)つロ 干杯~"))
        blbldl.setObjectName("blbldl")
        blbldl.resize(400, 600)
        blbldl.setMinimumSize(QtCore.QSize(400, 600))
        blbldl.setMaximumSize(QtCore.QSize(400, 600))

        text = self.get_link()
        font = QtGui.QFont()
        font.setFamily("幼圆")
        font.setPointSize(11)

        self.centralwidget = QtWidgets.QWidget(blbldl)
        self.centralwidget.setObjectName("centralwidget")
        self.gridFrame = QtWidgets.QFrame(self.centralwidget)
        self.gridFrame.setGeometry(QtCore.QRect(0, -20, 400, 600))
        self.gridFrame.setObjectName("gridFrame")
        self.gridFrame.setStyleSheet("background-image: url(:/q/src/ui2w.png);")

        self.link = QtWidgets.QLineEdit(self.centralwidget)
        self.link.setGeometry(QtCore.QRect(50, 110, 301, 51))
        self.link.setPlaceholderText(_translate("blbldl", "请输入视频链接或视频号"))
        self.link.setText(text)
        self.link.setFont(font)
        self.link.setCursor(QtGui.QCursor(QtCore.Qt.IBeamCursor))
        self.link.setObjectName("link")

        self.next = QtWidgets.QPushButton(self.centralwidget)
        self.next.setGeometry(QtCore.QRect(130, 190, 131, 41))
        self.next.setFont(font)
        self.next.setObjectName("next")
        self.next.setText(_translate("blbldl", "下一步"))

        self.groupBox = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox.setGeometry(QtCore.QRect(50, 280, 311, 234))
        self.groupBox.setObjectName("groupBox")
        self.groupBox.setTitle(_translate("blbldl", "状态"))

        self.comboBox = QtWidgets.QComboBox(self.groupBox)
        self.comboBox.setGeometry(QtCore.QRect(20, 140, 281, 31))
        self.comboBox.setEditable(False)
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItem("全部", "1-0")
        self.comboBox.addItem("最新", "0")

        self.pushButton = QtWidgets.QPushButton(self.groupBox)
        self.pushButton.setGeometry(QtCore.QRect(100, 180, 101, 41))
        self.pushButton.setObjectName("pushButton")
        self.pushButton.setText(_translate("blbldl", "Download"))
        self.label_status = QtWidgets.QTextBrowser(self.groupBox)
        self.label_status.setGeometry(QtCore.QRect(20, 30, 271, 71))
        self.label_status.setObjectName("label_status")
        # self.label_status.setReadOnly(True)
        self.label_episode = QtWidgets.QLabel(self.groupBox)
        self.label_episode.setGeometry(QtCore.QRect(20, 120, 71, 16))
        self.label_episode.setObjectName("label_episode")
        self.label_status.setText(_translate("blbldl", "欢迎使用blblDL<br>"
                                                       "made by xy<br>"
                                                       ""))
        self.label_episode.setText(_translate("blbldl", "请选择集数："))

        self.Advance = QtWidgets.QPushButton(self.centralwidget)
        self.Advance.setGeometry(QtCore.QRect(313, 240, 51, 24))
        self.Advance.setIconSize(QtCore.QSize(24, 24))
        self.Advance.setObjectName("Advance")
        self.Advance.setText(_translate("blbldl", "高级>>"))

        blbldl.setMenuBar(self.menuBar)
        blbldl.setCentralWidget(self.centralwidget)

        self.next.clicked.connect(lambda :Job2(self.re2()).start())
        self.link.editingFinished.connect(lambda :Job2(self.re2()).start())
        self.Advance.clicked.connect(self.re3)
        self.pushButton.clicked.connect(self.bClicked)
        QtCore.QMetaObject.connectSlotsByName(blbldl)
        self.update



    def get_status(self):
        return self.label_status.document().toPlainText()
    def re3(self):
        self.setupUi3(self)
        sys.stdout = EmittingStr(textWritten=self.outputWritten)

    def setupUi3(self, blbldl):
        _translate = QtCore.QCoreApplication.translate
        blbldl.setWindowTitle(_translate("blbldl", "blbldl->哔哩哔哩 (゜-゜)つロ 干杯~"))
        blbldl.setObjectName("blbldl")
        blbldl.resize(725, 600)
        blbldl.setMinimumSize(QtCore.QSize(725, 600))
        blbldl.setMaximumSize(QtCore.QSize(725, 600))

        text = self.get_link()
        font = QtGui.QFont()
        font.setFamily("幼圆")
        font.setPointSize(11)

        self.centralwidget = QtWidgets.QWidget(blbldl)
        self.centralwidget.setObjectName("centralwidget")
        self.gridFrame = QtWidgets.QFrame(self.centralwidget)
        self.gridFrame.setGeometry(QtCore.QRect(0, -20, 725, 600))
        self.gridFrame.setObjectName("gridFrame")
        self.gridFrame.setStyleSheet("background-image: url(:/q/src/ui3w.png);")

        self.link = QtWidgets.QLineEdit(self.centralwidget)
        self.link.setGeometry(QtCore.QRect(50, 110, 301, 51))
        self.link.setText(text)
        self.link.setPlaceholderText(_translate("blbldl", "请输入视频链接或视频号"))

        self.link.setFont(font)
        self.link.setCursor(QtGui.QCursor(QtCore.Qt.IBeamCursor))
        self.link.setObjectName("link")
        self.next = QtWidgets.QPushButton(self.centralwidget)
        self.next.setGeometry(QtCore.QRect(130, 190, 131, 41))
        self.next.setFont(font)
        self.next.setObjectName("next")
        self.next.setText(_translate("blbldl", "下一步"))

        self.groupBox = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox.setGeometry(QtCore.QRect(50, 280, 311, 234))
        self.groupBox.setObjectName("groupBox")
        self.groupBox.setTitle(_translate("blbldl", "状态"))

        selectedbox=self.comboBox.currentIndex()
        self.comboBox = QtWidgets.QComboBox(self.groupBox)
        self.comboBox.setGeometry(QtCore.QRect(20, 140, 281, 31))
        self.comboBox.setEditable(False)
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItem("全部", "1-0")
        self.comboBox.addItem("最新", "0")
        if not self.eplist == []:
            for i in range(1, len(self.eplist) + 1):
                self.comboBox.addItem(str(i), i)
        self.comboBox.setCurrentIndex(selectedbox)

        self.pushButton = QtWidgets.QPushButton(self.groupBox)
        self.pushButton.setGeometry(QtCore.QRect(100, 180, 101, 41))
        self.pushButton.setObjectName("pushButton")
        self.pushButton.setText(_translate("blbldl", "Download"))

        status=self.get_status()
        self.label_status = QtWidgets.QTextBrowser(self.groupBox)
        self.label_status.setGeometry(QtCore.QRect(20, 30, 271, 71))
        self.label_status.setObjectName("label_status")
        # self.label_status.setReadOnly(True)
        self.label_episode = QtWidgets.QLabel(self.groupBox)
        self.label_episode.setGeometry(QtCore.QRect(20, 120, 71, 16))
        self.label_episode.setObjectName("label_episode")
        self.label_status.setText(status)
        self.label_episode.setText(_translate("blbldl", "请选择集数："))

        self.modeGroup = QtWidgets.QGroupBox(self.centralwidget)
        self.modeGroup.setGeometry(QtCore.QRect(410, 40, 281, 81))
        self.modeGroup.setObjectName("modeGroup")
        self.modeGroup.setTitle(_translate("blbldl", "下载Mode"))

        self.video = QtWidgets.QCheckBox(self.modeGroup)
        self.video.setGeometry(QtCore.QRect(30, 40, 71, 16))
        global mode
        if mode !="ass":
            self.video.setChecked(True)
        self.video.setObjectName("video")
        self.video.setText(_translate("blbldl", "video"))

        self.ass = QtWidgets.QCheckBox(self.modeGroup)
        self.ass.setGeometry(QtCore.QRect(150, 40, 71, 16))
        self.ass.setObjectName("ass")
        if re.search(r"ass",mode):
            self.ass.setChecked(True)
        self.ass.setText(_translate("blbldl", "ass弹幕"))

        self.Aria2_Group = QtWidgets.QGroupBox(self.centralwidget)
        self.Aria2_Group.setGeometry(QtCore.QRect(410, 150, 281, 111))
        self.Aria2_Group.setObjectName("Aria2_Group")
        self.Aria2_Group.setTitle(_translate("blbldl", "Aria2设定"))

        self.thread_number = QtWidgets.QSpinBox(self.Aria2_Group)
        self.thread_number.setGeometry(QtCore.QRect(110, 25, 42, 22))
        self.thread_number.setMaximum(32)
        self.thread_number.setMinimum(1)
        global order_aria2
        self.thread_number.setProperty("value", int(re.sub(r"-s","",re.search(r"-s[0-9]*",order_aria2).group(0))))
        #self.thread_number.setReadOnly(True)
        self.thread_number.setObjectName("thread_number")
        self.thread = QtWidgets.QLabel(self.Aria2_Group)
        self.thread.setGeometry(QtCore.QRect(60, 30, 54, 12))
        self.thread.setObjectName("thread")
        self.thread.setText(_translate("blbldl", "线程数："))

        self.aria2_command_lable = QtWidgets.QLabel(self.Aria2_Group)
        self.aria2_command_lable.setGeometry(QtCore.QRect(30, 60, 141, 16))
        self.aria2_command_lable.setObjectName("aria2_command_lable")
        self.aria2_command = QtWidgets.QLineEdit(self.Aria2_Group)
        self.aria2_command.setGeometry(QtCore.QRect(30, 80, 231, 20))
        self.aria2_command.setObjectName("aria2_command")
        self.aria2_command.setText(order_aria2)
        self.ffmpeg_Group = QtWidgets.QGroupBox(self.centralwidget)
        self.ffmpeg_Group.setGeometry(QtCore.QRect(410, 280, 281, 71))
        self.ffmpeg_Group.setObjectName("ffmpeg_Group")
        self.ffmpeg_command_lable_2 = QtWidgets.QLabel(self.ffmpeg_Group)
        self.ffmpeg_command_lable_2.setGeometry(QtCore.QRect(30, 20, 141, 16))
        self.ffmpeg_command_lable_2.setObjectName("ffmpeg_command_lable_2")
        self.ffmpeg_command_2 = QtWidgets.QLineEdit(self.ffmpeg_Group)
        self.ffmpeg_command_2.setGeometry(QtCore.QRect(30, 40, 231, 20))
        self.ffmpeg_command_2.setObjectName("ffmpeg_command_2")
        global order_ffmpeg
        self.ffmpeg_command_2.setText(order_ffmpeg)
        self.aria2_command_lable.setText(_translate("blbldl", "command(高级选项，慎用)"))
        self.aria2_command.setPlaceholderText(_translate("blbldl", "请输入Aria2指令，url请用%url%代替"))
        self.ffmpeg_Group.setTitle(_translate("blbldl", "ffmpeg设定"))
        self.ffmpeg_command_lable_2.setText(_translate("blbldl", "command(高级选项，慎用)"))
        self.ffmpeg_command_2.setPlaceholderText(_translate("blbldl", "请输入ffmpeg指令，仅支持添加参数"))

        self.path_Group = QtWidgets.QGroupBox(self.centralwidget)
        self.path_Group.setGeometry(QtCore.QRect(410, 380, 281, 131))
        self.path_Group.setObjectName("path_Group")
        self.path_Group.setTitle(_translate("blbldl", "目录设定"))

        self.directory = QtWidgets.QLabel(self.path_Group)
        self.directory.setGeometry(QtCore.QRect(30, 20, 54, 12))
        self.directory.setObjectName("directory")
        self.directory.setText(_translate("blbldl", "下载目录："))

        self.path = QtWidgets.QLineEdit(self.path_Group)
        self.path.setGeometry(QtCore.QRect(30, 40, 231, 20))
        self.path.setObjectName("path")
        self.path.setText(_translate("blbldl", dirooo))

        self.Aria2_path_label = QtWidgets.QLabel(self.path_Group)
        self.Aria2_path_label.setGeometry(QtCore.QRect(30, 70, 61, 16))
        self.Aria2_path_label.setObjectName("Aria2_path_label")
        self.FFmpeg_path_label = QtWidgets.QLabel(self.path_Group)
        self.FFmpeg_path_label.setGeometry(QtCore.QRect(30, 100, 71, 16))
        self.FFmpeg_path_label.setObjectName("FFmpeg_path_label")
        self.Aria2_path = QtWidgets.QLineEdit(self.path_Group)
        self.Aria2_path.setGeometry(QtCore.QRect(100, 70, 161, 20))
        self.Aria2_path.setObjectName("Aria2_path")
        global bin_aria2_path
        self.Aria2_path.setText(bin_aria2_path)
        self.ffmpeg_path = QtWidgets.QLineEdit(self.path_Group)
        self.ffmpeg_path.setGeometry(QtCore.QRect(100, 100, 161, 20))
        self.ffmpeg_path.setObjectName("ffmpeg_path")
        global bin_ffmpeg_path
        self.ffmpeg_path.setText(bin_ffmpeg_path)
        self.Aria2_path_label.setText(_translate("blbldl", "Aria2路径："))
        self.FFmpeg_path_label.setText(_translate("blbldl", "ffmpeg路径："))
        self.Aria2_path.setPlaceholderText(_translate("blbldl", "Default"))
        self.ffmpeg_path.setPlaceholderText(_translate("blbldl", "Default"))

        self.Advance = QtWidgets.QPushButton(self.centralwidget)
        self.Advance.setGeometry(QtCore.QRect(313, 240, 51, 24))
        self.Advance.setIconSize(QtCore.QSize(24, 24))
        self.Advance.setObjectName("Advance")
        self.Advance.setText(_translate("blbldl", "<<收起"))

        blbldl.setMenuBar(self.menuBar)
        blbldl.setCentralWidget(self.centralwidget)

        self.pushButton.clicked.connect(self.bClicked)
        self.next.clicked.connect(self.re3)
        self.Advance.clicked.connect(lambda :Job2(self.re2()).start())
        self.ass.stateChanged.connect(self.modechange)
        self.video.stateChanged.connect(self.modechange)
        self.thread_number.editingFinished.connect(self.setThread)
        self.aria2_command.editingFinished.connect(self.set_aria2_command)
        self.ffmpeg_command_2.editingFinished.connect(self.set_ffmpeg_command)
        self.path.editingFinished.connect(self.set_dir)
        self.Aria2_path.editingFinished.connect(self.set_bin_aria2)
        self.ffmpeg_path.editingFinished.connect(self.set_bin_ffmpeg)

        QtCore.QMetaObject.connectSlotsByName(blbldl)

    def outputWritten(self, text):
        cursor = self.label_status.textCursor()
        cursor.movePosition(QtGui.QTextCursor.End)
        cursor.insertText(text)
        self.label_status.setTextCursor(cursor)
        self.label_status.ensureCursorVisible()


    def get_dlEp(self):
        global choice
        choice=self.comboBox.currentData()

    def set_bin_ffmpeg(self):
        global bin_ffmpeg_path
        if self.ffmpeg_path.text():
            bin_ffmpeg_path=self.ffmpeg_path.text()
        else:
            bin_ffmpeg_path="ffmpeg"

    def set_bin_aria2(self):
        global bin_aria2_path
        if self.Aria2_path.text():
            bin_aria2_path=self.Aria2_path.text()
        else:
            bin_aria2_path="aria2c"

    def set_dir(self):
        global dirooo
        if self.path.text():
            dirooo=self.path.text()
        else:
            global currentdir
            dirooo=currentdir

    def set_ffmpeg_command(self):
        global order_ffmpeg
        if self.ffmpeg_command_2.text():
            order_ffmpeg=self.ffmpeg_command_2.text()
        else:
            order_ffmpeg='ffmpeg -i %video% -i %audio% -y -c:v copy -c:a copy %filename%'

    def set_aria2_command(self):
        global order_aria2
        if self.aria2_command.text():
            order_aria2=self.aria2_command.text()
        else:
            order_aria2='aria2c -s18 -x10  %url%  --referer "https://www.bilibili.com" --file-allocation none'

    def setThread(self):
        global order_aria2
        order_aria2=re.sub(r"-x[0-9]*",r"-x"+self.thread_number.text(),order_aria2)

    def modechange(self):
        global mode
        assdl=self.ass.checkState()
        videodl=self.video.checkState()
        if assdl:
            if videodl:
                mode="ass+"
            else:
                mode="ass"
        else:
            mode=""

    def bClicked(self):
        """Runs the DL function."""
        self.get_dlEp()
        a=Job2(target=self.eplistDL,arg=[self.eplist,self.ss])
        a.start()

    def write(self, txt):
        self.label_status.append(str(txt))

    def main(self, curl):
        try:
            global url,info_headers
            url = curl
            category_bv = re.search("bv" + re_all, url, re.I)
            if category_bv:
                eplist = api_to_get_cid(category_bv.group(0))
                self.ss=category_bv.group(0)
                if len(eplist) != 1:
                    print("this number has " + str(len(eplist)) + " episodes.")
                    return eplist
                else:
                    print("this number has " + "1"+ " episode.")
                    return eplist
            del category_bv
            category_ss = re.search("ss" + re_all, url, re.I)
            if category_ss:
                if not re.search(r"bilibili.com", url, re.I):
                    url = "https://www.bilibili.com/bangumi/play/" + category_ss.group(0)
                return self.ssdecoding()
            del category_ss

            category_av = re.search("av" + re_all, url, re.I)
            if category_av:
                eplist = api_to_get_cid(category_av.group(0))
                self.ss = re.search("[^a|v][0-9]*" ,category_av.group(0) , re.I).group(0)
                if len(eplist) != 1:
                    print("this number has " + str(len(eplist)) + " episodes.")
                    return eplist
                else:
                    print("this number has " + "1" + " episode.")
                    return eplist
            del category_av
            category_ep = re.search("ep" + re_all, url, re.I)
            if category_ep:
                print("detect EP video,auto download this video")
                if not re.search(r"bilibili.com", url, re.I):
                    blbldl("https://www.bilibili.com/bangumi/play/" + category_ep.group(0), category_ep.group(0))
                else:
                    blbldl(url, category_ep.group(0), cid=0)
                ending()
            if re.search(r'b23.tv', url):
                if not re.search(r"http",url):
                    url=r"http://"+url
                info_header_4short = {
                    'User-Agent': 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36',
                    'Host': 'b23.tv',
                    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9',
                    'Upgrade-Insecure-Requests': '1',
                    'Connection': 'keep-alive',
                    'Accept-Encoding': 'gzip, deflate',
                    'Accept-Language': 'zh-CN,zh;q=0.9,en-GB;q=0.8,en-US;q=0.7,en;q=0.6', }
                r = requests.get(url, headers=info_header_4short, allow_redirects=False)
                if r.status_code == 302:
                    url = r.headers['Location']
                    return self.main(url)
                else:
                    print("wrong short link")
            return []
        except Exception as e:
            print("\n\nnot a valid bl-video link,please check!")
            print(e)
            return []
    ###对ss的剧集分解部分
    def ssdecoding(self) :
        r = requests.get(url,headers=info_headers)
        soup = BeautifulSoup(r.content.decode(), 'lxml')
        raw = soup.find_all("script")
        pt1 = 0
        for i in raw:
            if str(i).find("<script>window.__INITIAL_STATE__=") != -1:
                break
            pt1+=1
        page = str(raw[pt1])
        del raw
        ###这里大部分操作copy于dl部分，不再做过多解释
        ###截止到 2021.01.28 ep_info是script的正33到反131
        p1 = json.loads(page[33:-131])
        ulp = p1['epList']
        title=p1['h1Title']
        #最大支持52ep下载
        infoep =[{} for _ in range(len(ulp))]
        info_p=0
        for i in ulp:
            infoep[info_p]['title']=i.get('title',0)
            infoep[info_p]['bvid']=i.get('bvid','')
            infoep[info_p]['cid']=i.get('cid','')
            infoep[info_p]['titleFormat']=i.get('titleFormat','')
            info_p+=1

        print("Result: The ",title," has ",info_p," episodes")
        self.ss_title=title
        self.ss="ss"
        return infoep

    def jsdump(self):
        global dirooo,order_ffmpeg,order_aria2,bin_ffmpeg_path,bin_aria2_path,currentdir,mode
        jsd={"dirooo":dirooo,"order_aria2":order_aria2,"order_ffmpeg":order_ffmpeg,"bin_aria2_path":bin_aria2_path,"bin_ffmpeg_path":bin_ffmpeg_path,"mode":mode}
        dirchange(currentdir)
        try:
            json.dump(jsd,open("option.json","w"))
        except Exception:
            print("save error")

    def eplistDL(self,eplist,ss="ss"):
        try:
            global mode,choice,dirooo,currentdir
            dirchange(dirooo)
            if not mode:
                mode="ass+"
            if ss=="ss":
                print("Download started")
                dirchange(re.sub(r'[:\s?/*"`><|\\]', '_', self.ss_title))
                if choice == "1-0":
                    for p, i in enumerate(eplist):
                        print("downloading ",p+1)
                        if i.get('title', 0) != 0:
                            vUrl = ""
                            filename = ""
                            if i.get('bvid', "") == "":
                                print("This episode has no BV number!")
                                print("------------------------------\nDownload Failed!")
                                continue
                            vUrl = 'https://api.bilibili.com/x/player/playurl?cid=' + str(i.get('cid', '')) + '&bvid=' + i.get(
                                'bvid', '') + '&qn=120&fnval=80'
                            if i.get('titleFormat', '') == "":
                                filename = re.sub(r'[:\s?/*"`><|\\]', '_', self.ss_title) + "_第" + str(i.get('title', 0)) + "话"
                            else:
                                filename = re.sub(r'[:\s?/*"`><|\\]', '_', self.ss_title) + "_" + re.sub(r'[:\s?/*"`><|\\]', '_',
                                                                                                 i.get('titleFormat', ''))
                            blbldl(vUrl, filename, i.get('cid', 0))
                else:
                    p=int(choice)
                    i={}
                    if p == 0:
                        i=eplist[-1]
                        print("downloading ", len(eplist))
                    else:
                        i=eplist[p-1]
                        print("downloading ", p)
                    if i.get('title', 0) != 0:
                        vUrl = ""
                        filename = ""
                        if i.get('bvid', "") == "":
                            print("This episode has no BV number!")
                            print("------------------------------\nDownload Failed!")
                            return
                        vUrl = 'https://api.bilibili.com/x/player/playurl?cid=' + str(i.get('cid', '')) + '&bvid=' + i.get(
                            'bvid', '') + '&qn=120&fnval=80'
                        if i.get('titleFormat', '') == "":
                            filename = re.sub(r'[:\s?/*"`><|\\]', '_', self.ss_title) + "_第" + str(i.get('title', 0)) + "话"
                        else:
                            filename = re.sub(r'[:\s?/*"`><|\\]', '_', self.ss_title) + "_" + re.sub(r'[:\s?/*"`><|\\]',
                                                                                                     '_',
                                                                                                     i.get('titleFormat',
                                                                                                           ''))
                        blbldl(vUrl, filename, i.get('cid', 0))
                dirchange("../")
                ending()
            elif re.search(r"bv",ss,re.I):
                if choice == "1-0":
                    if len(eplist)>1:
                        dirchange(ss)
                    for p,i in enumerate(eplist):
                        print("downloading ",p+1)
                        vUrl = 'https://api.bilibili.com/x/player/playurl?cid=' + str(i.get('cid', 0)) + '&bvid=' +ss + '&qn=120&fnval=80'
                        blbldl(vUrl ,ss+"_"+str(i.get('ep', 0)),i.get('cid', 0))
                    dirchange(dirooo)
                else:
                    p = int(choice)
                    i = {}
                    if p == 0:
                        i = eplist[-1]
                        print("downloading ", len(eplist))
                    else:
                        i = eplist[p - 1]
                        print("downloading ", p)
                    vUrl = 'https://api.bilibili.com/x/player/playurl?cid=' + str(
                        i.get('cid', 0)) + '&bvid=' + ss + '&qn=120&fnval=80'
                    blbldl(vUrl, ss + "_" + str(i.get('ep', 0)), i.get('cid', 0))
                ending()
            else:
                if choice == "1-0":
                    if len(eplist)>1:
                        dirchange(ss)
                    for p,i in enumerate(eplist):
                        print("downloading ",p+1)
                        vUrl = 'https://api.bilibili.com/x/player/playurl?cid=' + str(i.get('cid', 0)) + '&avid=' +ss + '&qn=120&fnval=80'
                        blbldl(vUrl ,ss+"_"+str(i.get('ep', 0)),i.get('cid', 0))
                    dirchange(dirooo)
                else:
                    p = int(choice)
                    i = {}
                    if p == 0:
                        i = eplist[-1]
                        print("downloading ", len(eplist))
                    else:
                        i = eplist[p - 1]
                        print("downloading ", p)
                    vUrl = 'https://api.bilibili.com/x/player/playurl?cid=' + str(
                        i.get('cid', 0)) + '&avid=' + ss + '&qn=120&fnval=80'
                    blbldl(vUrl, ss + "_" + str(i.get('ep', 0)), i.get('cid', 0))
                ending()
            dirchange(currentdir)
        except Exception as e:
            print(e)
            ending(-1)
    def closeEvent(self,e):
        # 创建一个消息盒子(提示框)

        quitMsgBox = QMessageBox()

        # 设置提示框的标题

        quitMsgBox.setWindowTitle('确认提示')
        quitMsgBox.setWindowIcon(self.icon)

        # 设置提示框的内容

        quitMsgBox.setText('你确认退出吗？')

        # 设置按钮标准，一个yes一个no

        quitMsgBox.setStandardButtons(QMessageBox.Yes | QMessageBox.No)

        # 获取两个按钮并且修改显示文本

        buttonY = quitMsgBox.button(QMessageBox.Yes)

        buttonY.setText('确定')

        buttonN = quitMsgBox.button(QMessageBox.No)

        buttonN.setText('后台')

        quitMsgBox.exec_()

        # 判断返回值，如果点击的是Yes按钮，我们就关闭组件和应用，否则就忽略关闭事件

        if quitMsgBox.clickedButton() == buttonY:

            e.accept()

        else:

            self.hide()
            e.ignore()
            self.tray = QSystemTrayIcon()  # 创建系统托盘对象
            self.tray.setIcon(self.icon)  # 设置系统托盘图标
            self.tray.setToolTip("blbldl")
            #self.tray.activated.connect(self.TuoPanEvent)  # 设置托盘点击事件处理函数
            self.tray_menu = QMenu(QApplication.desktop())  # 创建菜单
            self.RestoreAction = QAction(u'还原 ', self, triggered=self.show)  # 添加一级菜单动作选项(还原主窗口)
            self.QuitAction = QAction(u'退出 ', self, triggered=self.quit)  # 添加一级菜单动作选项(退出程序)
            self.tray_menu.addAction(self.RestoreAction)  # 为菜单添加动作
            self.tray_menu.addAction(self.QuitAction)
            self.tray.setContextMenu(self.tray_menu)  # 设置系统托盘菜单
            self.tray.showMessage('blbldl-Queue', 'blbldl is running', icon=1)

            def act(reason):
                # 鼠标点击icon传递的信号会带有一个整形的值，1是表示单击右键，2是双击，3是单击左键，4是用鼠标中键点击
                if reason == 2:
                    self.show()
                # print("系统托盘的图标被点击了")

            self.tray.activated.connect(act)
            self.tray.show()
    def quit(self):
        sys.exit(0)